{"version":3,"file":"static/js/378.be8f5d03.chunk.js","mappings":"8SAQaA,EAAa,WACxB,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KAEMC,GAAWC,EAAAA,EAAAA,MAEjB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAQF,EAAaG,IAAI,UAE/BC,EAAAA,EAAAA,YAAU,WACR,GAAIF,EAAO,CAAC,IACKG,EADN,mCACT,2FACET,GAAW,GADb,mBAGuBU,EAAAA,EAAAA,IAAoBJ,GAH3C,UAIgC,KADtBK,EAHV,QAIaC,QAAQC,OAJrB,uBAKMC,EAAAA,GAAAA,MACE,8DANR,0BAWIlB,EAASe,EAAKC,SAXlB,kDAaId,EAAS,EAAD,IAbZ,yBAeIE,GAAW,GAff,6EADS,qDAmBTS,OAED,CAACH,IAiBJ,OACE,4BACGT,IAAS,0DAAkCA,EAAMkB,WACjDhB,IAAW,SAACiB,EAAA,EAAD,KACZ,kBAAMC,SAnBW,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cAC0B,KAArCD,EAAKE,SAAShB,MAAMiB,MAAMC,SAK9BnB,EAAgB,CAAEC,MAAOc,EAAKE,SAAShB,MAAMiB,QAE7CE,YAAW,WACTL,EAAKM,UACJ,QAO6BC,aAAa,MAA3C,WACE,kBAAOC,KAAK,OAAOC,KAAK,QAAQC,YAAY,gBAC5C,0CAEDnC,EAAMkB,OAAS,IAAK,SAACkB,EAAA,EAAD,CAAWpC,MAAOA,EAAOM,SAAUA,S,2EC/DjD8B,EAAY,SAAC,GAAyB,IAAvBpC,EAAsB,EAAtBA,MAAOM,EAAe,EAAfA,SACjC,OACE,wBACGN,EAAMqC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACT,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAMpC,GAA1C,SACGiC,KAFID","sources":["Views/MoviesPage.jsx","components/FilmsList/FilmsList.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useSearchParams, useLocation } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Loader } from 'components/Loader/Loader';\nimport { getFilmBySearchName } from '../helpers/fetch-beckend';\nimport { FilmsList } from '../components/FilmsList/FilmsList';\n\nexport const MoviesPage = () => {\n  const [items, setItems] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const location = useLocation();\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    if (query) {\n      async function fetchItems() {\n        setLoading(true);\n        try {\n          const data = await getFilmBySearchName(query);\n          if (data.results.length === 0) {\n            toast.error(\n              'Search result not successful. Enter the correct movie name'\n            );\n            return;\n          }\n\n          setItems(data.results);\n        } catch (error) {\n          setError(error);\n        } finally {\n          setLoading(false);\n        }\n      }\n      fetchItems();\n    }\n  }, [query]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    if (form.elements.query.value.trim() === '') {\n      //Щоб не вводити пробіли в інпуті\n      return;\n    }\n\n    setSearchParams({ query: form.elements.query.value });\n\n    setTimeout(() => {\n      form.reset();\n    }, 1500);\n  };\n\n  return (\n    <main>\n      {error && <p>Whoops, something went wrong: {error.message}</p>}\n      {loading && <Loader />}\n      <form onSubmit={handleSubmit} autoComplete=\"off\">\n        <input type=\"text\" name=\"query\" placeholder=\"Enter name\" />\n        <button>Search</button>\n      </form>\n      {items.length > 0 && <FilmsList items={items} location={location} />}\n    </main>\n  );\n};\n","import { Link } from 'react-router-dom';\n\nexport const FilmsList = ({ items, location }) => {\n  return (\n    <ul>\n      {items.map(({ id, title }) => (\n        <li key={id}>\n          <Link to={`/movies/${id}`} state={{ from: location }}>\n            {title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n"],"names":["MoviesPage","useState","items","setItems","error","setError","loading","setLoading","location","useLocation","useSearchParams","searchParams","setSearchParams","query","get","useEffect","fetchItems","getFilmBySearchName","data","results","length","toast","message","Loader","onSubmit","e","preventDefault","form","currentTarget","elements","value","trim","setTimeout","reset","autoComplete","type","name","placeholder","FilmsList","map","id","title","to","state","from"],"sourceRoot":""}